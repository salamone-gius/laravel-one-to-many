// --- AGGIUNTA NUOVA ENTITà (TABELLA) E RELATIVA RELAZIONE--- \\

1. creo la migration che creerà una nuova entità/tabella ('categories'):
    php artisan make:migration create_nometabella_table

2. in database > migrations trovo la migration appena creata dove:

    - all'interno del metodo up() andrò a costruire la struttura della nuova tabella (colonne e tipi di dato che la popoleranno);

    - all'interno del metodo down() scriverò le istruzioni di rollback (cosa fare se si annulla l'ultima migration).

3. lancio la migration appena impostata che creerà la tabella a db:
    php artisan migrate

4. una volta individuata la tabella principale e quella secondaria, creo la relazione tra le tabelle a livello di db:

    - creo la migration che aggiungerà una nuova colonna (la foreign key è legata alla primary key della tabella principale) alla tabella DIPENDENTE o SECONDARIA ('posts'):
        php artisan make:migration add_column_nome_nuova_colonna_nome_tabella_table --table=nome_tabella

    - in database > migrations trovo la migration appena creata dove:

        - all'interno del metodo up() andrò a definire la nuova colonna, il relativo tipo di dato e la RELAZIONE con la tabella principale(doc: laravel/migrations/columns);

        - all'interno del metodo down() scrivo le istruzioni per droppare PRIMA la relazione (dropForeign(['nome_colonna'])) e poi la colonna (dropColumn('nome_colonna'))

    - lancio la migration appena impostata che aggiungerà la nuova colonna alla tabella SECONDARIA e la relativa RELAZIONE con la tabella PRINCIPALE:
        php artisan migrate

5. creo il model della nuova tabella ('categories'):
    php artisan make:model NomeTabellaAlSingolare

6. informo Laravel della relazione tra le due tabelle attraverso i model relativi (Post e Category):

    - nel model della tabella principale (o indipendente) specifico il tipo di relazione attraverso la creazione di un metodo pubblico che si chiamerà come la tabella secondaria (o dipendente) a cui si andrà a legare. Il metodo restituisce il tipo di relazione (in questo caso relazione uno a molti) attraverso il metodo hasMany('Namespace\ModelloTabellaSecondaria'). Si deve tradurre: "una categoria ha molti posts";

    - nel model della tabella dipendente (o secondaria) specifico il tipo di relazione attraverso la creazione di un metodo pubblico che si chiamerà come la tabella principale (o indipendente) a cui si andrà a legare. Il metodo restituisce il tipo di relazione (in questo caso relazione uno a molti) attraverso il metodo belongsTo('Namespace\ModelloTabellaPrincipale'). Si deve tradurre: "un singolo post appartiene ad una sola categoria".

7. popolo la nuova tabella attraverso un seeder:

    - creo il seeder:
        php artisan make:seeder NomeTabellaTableSeeder;

    - importo il model della tabella che devo popolare nel seeder appena creato in database > seeds;

    - all'interno del metodo run() inserisco le direttive su come e con quali dati popolare la tabella;

    - lancio il seeder:
        php artisan db:seed.

8. aggiungo una select al create.blade dove permetterò all'utente di aggiungere una categoria al nuovo post:

    - in app > Http > Controllers > Admin > PostController:

        - importo il model Category;

        - dentro al metodo create() importo tutte le categorie e le inietto nella view che mi restituirà.

    - in create.blade, all'interno del form, aggiungo una select con le categorie da associare ad ogni nuovo post;

    - in app > Http > Controllers > Admin > PostController nel metodo store() aggiungo la validazione relativa a questo nuovo campo della tabella posts;

    - in create.blade aggiungo la stampa dell'errore in caso di validazione fallita.