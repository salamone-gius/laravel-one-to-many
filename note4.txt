// --- CRUD --- \\

1. creo il db direttamente con phpMyAdmin

2. creo la tabella dentro al db:
    php artisan make:migration create_nome_tabella_table

3. in database > migrations > data_odierna_create_nome_tabella_table.php inizializzo le colonne della tabella e indico il tipo di dato con cui le andrò a popolare

4. creo a db la tabella e le colonne appena inizializzate:
    php artisan migrate

5. creo il model che sarà il modello della tabella che farà da tramite tra laravel e la tabella a db
    php artisan make:model NomeTabellaSingolare

6. creo il controller che farà da tramite tra il model e una view direttamente con namespace 'Admin' e già scaffoldato (!?) per le operazioni di CRUD (con --resource)
    php artisan make:controller Admin/NomeTabellaSingolareController --resource

7. in routes > web.php, all'interno del middleware Auth namespace Admin, creo la rotta per arrivare ai metodi del nuovo controller

8. verifico se effettivamente sono state create tutte le rotte per le operazioni di CRUD:
    php artisan route:list

9. posso cominciare a creare tutte le operazioni di CRUD

// --- CREATE (sezioni create() e store() del controller) --- \\

1. in resources > view > admin creo la cartella che conterrà tutte le pagine blade relative alla CRUD della nuova tabella

2. in resources > view > admin > nome_tabella creo la pagina create.blade

3. in app > Http > Controllers > Admin > NomeTabellaSingolareController.php, all'interno del metodo create(), restituisco la view della nuova create.blade

4. in resources > view > admin > nome_tabella > create.blade.php creo la sezione relativa alla CREAZIONE (da parte dell'utente) di un nuovo elemento nella tabella:

    - estendo il layout di app.blade (@extends) e creo una @section('content') dove inserirò il contenuto;

    - creo il form per la creazione di un nuovo post:

        - nell'attributo action del tag form definisco la rotta che punta allo store per immagazzinare gli elementi del nuovo post (al submit creerà una nuova riga della tabella):
            <form action="{{route('admin.nome_tabella.store')}}">;

        - nell'attributo method del tag form definisco il metodo POST:
            <form action="{{route('admin.nome_tabella.store')}}" method="POST">;

        - aggiungo il token di validazione di laravel @csrf:
            <form action="{{route('admin.nome_tabella.store')}}" method="POST">
                @csrf

        - aggiungo/modifico un tag input per ogni elemento (colonna) della tabella:
            - imposto l'attributo type del tag input;
            - l'attributo for del tag label deve matchare con l'attributo id del tag input;
            - l'attributo name (importantissimo) deve matchare con il nome della colonna che dovrà andare a riempire.

        - verifico se i dati inseriti dall'utente nel form mi arrivano correttamente:
            nel controller, all'interno del metodo store():
                dd($request->all()).

5. in app > Http > Controllers > Admin > NomeTabellaSingolareController.php,  importo il model relativo. Al metodo store() arrivano i dati submittati dal form (Request $request). Con questi dati dovrò fare principalmente 3 cose:

    5.1 VALIDAZIONE: all'interno del metodo validate() applicato alla $request, scrivo tutte le caratterische che i dati in ingresso devono avere, colonna per colonna (doc: validation rules);

    5.2 CREAZIONE DEL NUOVO ELEMENTO:
        - passo tutti i dati in arrivo dal form ($request) dentro la variabile $data;
        - istanzio il modello per la creazione del nuovo elemento;
        - imposto con quali dati in arrivo andrò a riempire quali colonne;
        - salvo i dati a db in maniera permanente con il metodo save() applicato al nuovo elemento.

    5.3 REINDIRIZZAMENTO: restituisco il reindirizzamento alla rotta che voglio visualizzare dopo il submit.

// --- READ (sezioni index() e show() del controller) --- \\

1. in resources > view > admin > nome_tabella creo la pagina index.blade che mi restituirà l'elenco degli elementi della tabella:

    - estendo il layout di app.blade (@extends) e creo una @section('content') dove inserirò il contenuto;

    - ciclando l'array passatomi dal controller, inserisco tutti i dati.

2. in app > Http > Controllers > Admin > NomeTabellaSingolareController.php, all'interno del metodo index(), passo tutti gli elementi della tabella relativa e restituisco la view della nuova index.blade

3. aggiungo i link con le rotte alle pagine blade appena create alle pagine esistenti

